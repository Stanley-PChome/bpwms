<?xml version="1.0" encoding="utf-8"?>
<uiLib:Wms3plUserControl x:Class="Wms3pl.WpfClient.P19.Views.P1920210000" xmlns:telerik="http://schemas.telerik.com/2008/xaml/presentation" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" mc:Ignorable="d" xmlns:uiLib="clr-namespace:Wms3pl.WpfClient.UILib;assembly=Wms3pl.WpfClient.UILib" xmlns:controls="clr-namespace:Wms3pl.WpfClient.UILib.Controls;assembly=Wms3pl.WpfClient.UILib" xmlns:common="clr-namespace:Wms3pl.WpfClient.Common;assembly=Wms3pl.WpfClient.Common" xmlns:converters="clr-namespace:Wms3pl.WpfClient.Common.Converters;assembly=Wms3pl.WpfClient.Common" xmlns:viewModel="clr-namespace:Wms3pl.WpfClient.P19.ViewModel" x:Name="Window" Margin="0,0,0,0" xmlns:Properties="clr-namespace:Wms3pl.WpfClient.P19.Properties" xmlns:res="clr-namespace:Wms3pl.WpfClient.Resources;assembly=Wms3pl.WpfClient.Resources" HorizontalAlignment="Stretch" FontSize="18" MinWidth="800" controls:PermissionService.FunctionId="P1920210000" controls:PermissionService.FunctionName="倉庫範圍定義" FormException="{Binding Exception}">
  <uiLib:Wms3plUserControl.DataContext>
    <viewModel:P1920210000_ViewModel x:Name="Vm" />
  </uiLib:Wms3plUserControl.DataContext>
  <uiLib:Wms3plUserControl.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Wms3pl.WpfClient.UILib;component/Generic.xaml" />
      </ResourceDictionary.MergedDictionaries>
      <common:NotConverter x:Key="NotConverter" />
      <viewModel:P1920210000_ViewModel x:Key="Vm" />
      <converters:EnumToVisibilityConverter x:Key="EnumToVisibilityConverter" />
      <converters:EnumToNotVisibilityConverter x:Key="EnumToNotVisibilityConverter" />
      <converters:EnumBooleanConverter x:Key="EnumBooleanConverter" />
      <converters:EnumToNotBooleanConverter x:Key="EnumToNotBooleanConverter" />
    </ResourceDictionary>
  </uiLib:Wms3plUserControl.Resources>
  <telerik:RadBusyIndicator x:Name="GridBusyIndicator" BusyContent="{x:Static res:Resources.Loading}" IsIndeterminate="False" IsBusy="{Binding IsBusy}">
    <uiLib:BasicMaster x:Name="Master">
      <uiLib:BasicMaster.ToolBarArea>
        <WrapPanel>
          <Button Style="{StaticResource SearchButton}" controls:PermissionService.FunctionId="BP1920210001" Command="{Binding SearchCommand}" />
          <Button Style="{StaticResource AddButton}" controls:PermissionService.FunctionId="BP1920210002" Command="{Binding AddCommand}" />
          <Button Style="{StaticResource CancelButton}" controls:PermissionService.FunctionId="BP1920210004" Command="{Binding CancelCommand}" />
          <Button Style="{StaticResource DeleteButton}" controls:PermissionService.FunctionId="BP1920210005" Command="{Binding DeleteCommand}" />
          <Button Style="{StaticResource SaveButton}" controls:PermissionService.FunctionId="BP1920210006" Command="{Binding SaveCommand}" IsEnabled="{Binding Path=(Validation.HasError), ElementName=LayoutRoot, Converter={StaticResource NotConverter}}" />
        </WrapPanel>
      </uiLib:BasicMaster.ToolBarArea>
      <uiLib:BasicMaster.MainContent>
        <TabControl x:Name="LayoutRoot">
          <TabControl.BindingGroup>
            <BindingGroup Name="errorGroup" />
          </TabControl.BindingGroup>
          <TabItem Header="{x:Static res:Resources.Main}" Width="Auto">
            <DockPanel>
              <DockPanel DockPanel.Dock="Top" IsEnabled="{Binding UserOperateMode,Converter={StaticResource EnumBooleanConverter},ConverterParameter={x:Static uiLib:OperateMode.Query}}">
                <GroupBox DockPanel.Dock="Top" Header="{x:Static res:Resources.QueryCondition}">
                  <WrapPanel>
                    <Label Content="{x:Static res:Resources.Dc}" Style="{StaticResource LbStyle}" />
                    <ComboBox Style="{StaticResource ComboStyle}" ItemsSource="{Binding DcCodes}" SelectedValue="{Binding SelectDcCode,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedValuePath="Value" DisplayMemberPath="Name" Name="DcComboBox" />
                  </WrapPanel>
                </GroupBox>
              </DockPanel>
              <DockPanel DockPanel.Dock="Top" Visibility="{Binding UserOperateMode ,Converter={StaticResource EnumToVisibilityConverter},ConverterParameter={x:Static uiLib:OperateMode.Add}}">
                <Grid>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                  </Grid.RowDefinitions>
                  <WrapPanel Margin="5" Grid.Row="0">
                    <Label Margin="10,0,15,0" Content="{x:Static Properties:Resources.SelectedClassType}" Style="{StaticResource LbStyle}" HorizontalContentAlignment="Right" />
                    <ComboBox Style="{StaticResource ComboStyle}" ItemsSource="{Binding TypeList}" SelectedValue="{Binding SelectType,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" SelectedValuePath="Value" DisplayMemberPath="Name" Name="TypeComboBox" />
                  </WrapPanel>
                  <WrapPanel Margin="5" Grid.Row="1">
                    <RadioButton Margin="10,0,18,0" Content="{x:Static Properties:Resources.RANGE}" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" GroupName="SettingType" IsChecked="{Binding SettingType,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,Converter={StaticResource EnumBooleanConverter},ConverterParameter={x:Static viewModel:SettingMode.Area}}" />
                    <TextBox Margin="5,5,0,5" MaxLength="{Binding TextLength}" KeyDown="TextBox_KeyDown" InputMethod.IsInputMethodEnabled="False" IsEnabled="{Binding SettingType,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,Converter={StaticResource EnumBooleanConverter},ConverterParameter={x:Static viewModel:SettingMode.Area}}" Text="{Binding StartText,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Width="100" />
                    <Label Content="～" Style="{StaticResource LbStyle}" HorizontalContentAlignment="Center" />
                    <TextBox Margin="0,5,0,5" MaxLength="{Binding TextLength}" Style="{StaticResource TxtStyle}" KeyDown="TextBox_KeyDown" InputMethod.IsInputMethodEnabled="False" IsEnabled="{Binding SettingType,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,Converter={StaticResource EnumBooleanConverter},ConverterParameter={x:Static viewModel:SettingMode.Area}}" Text="{Binding EndText,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Width="100" />
                    <Label Content="{x:Static Properties:Resources.INPUT_TEXT}" Style="{StaticResource LbStyle}" HorizontalContentAlignment="Center" />
                  </WrapPanel>
                  <WrapPanel Margin="5" Grid.Row="2">
                    <RadioButton Margin="10,0,5,0" Content="{x:Static Properties:Resources.DEFINITION}" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" GroupName="SettingType" IsChecked="{Binding SettingType,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,Converter={StaticResource EnumBooleanConverter},ConverterParameter={x:Static viewModel:SettingMode.Customize}}" />
                    <TextBox Margin="0,5,0,5" MaxLength="{Binding TextLength}" Style="{StaticResource TxtStyle}" CharacterCasing="Upper" InputMethod.IsInputMethodEnabled="False" IsEnabled="{Binding SettingType,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,Converter={StaticResource EnumBooleanConverter},ConverterParameter={x:Static viewModel:SettingMode.Customize}}" Text="{Binding CustomizeText,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Width="100" />
                    <Label Margin="100,0,0,0" Content="{x:Static Properties:Resources.A_TO_Z}" Style="{StaticResource LbStyle}" HorizontalContentAlignment="Center" />
                    <Button Margin="5,5,5,5" Content="{x:Static Properties:Resources.ADD_SET}" Width="100" Command="{Binding AddSetCommand}" />
                    <Button Margin="5,5,5,5" Content="{x:Static Properties:Resources.DEL_SET}" Width="100" Command="{Binding DelSetCommand}" />
                  </WrapPanel>
                </Grid>
              </DockPanel>
              <DataGrid Name="dgGrouList" ItemsSource="{Binding EditDataList}" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False" SelectionMode="Single" SelectionUnit="FullRow" IsReadOnly="True" Style="{StaticResource DgStyle}" SelectedItem="{Binding SelectEditData,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" IsSynchronizedWithCurrentItem="True">
                <DataGrid.Columns>
                  <DataGridCheckBoxColumn Binding="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <DataGridCheckBoxColumn.HeaderTemplate>
                      <DataTemplate>
                        <CheckBox IsChecked="{Binding IsJobSelectedAll, ElementName=Vm, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Command="{Binding CheckAllCommand, ElementName=Vm}" CommandParameter="JobGroup" Content="{x:Static res:Resources.SelectAll}"></CheckBox>
                      </DataTemplate>
                    </DataGridCheckBoxColumn.HeaderTemplate>
                    <DataGridCheckBoxColumn.ElementStyle>
                      <Style TargetType="CheckBox">
                        <Setter Property="VerticalAlignment" Value="Center" />
                        <Setter Property="HorizontalAlignment" Value="Center" />
                        <Setter Property="IsEnabled" Value="{Binding Item.IsEditData, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" />
                      </Style>
                    </DataGridCheckBoxColumn.ElementStyle>
                  </DataGridCheckBoxColumn>
                  <DataGridComboBoxColumn Header="{x:Static res:Resources.Dc}" IsReadOnly="True" ItemsSource="{Binding DcCodes, Source={StaticResource Vm}}" SelectedValuePath="Value" DisplayMemberPath="Name" SelectedValueBinding="{Binding Item.DC_CODE, ValidatesOnExceptions=true, NotifyOnValidationError=true, ValidatesOnDataErrors=True}">
                    <DataGridComboBoxColumn.CellStyle>
                      <Style TargetType="DataGridCell" BasedOn="{StaticResource UcSingleRowAddEditFocus}" />
                    </DataGridComboBoxColumn.CellStyle>
                  </DataGridComboBoxColumn>
                  <DataGridComboBoxColumn Header="{x:Static Properties:Resources.SETTING_TYPE}" IsReadOnly="True" ItemsSource="{Binding TypeList, Source={StaticResource Vm}}" SelectedValuePath="Value" DisplayMemberPath="Name" SelectedValueBinding="{Binding Item.TYPE, ValidatesOnExceptions=true, NotifyOnValidationError=true, ValidatesOnDataErrors=True}">
                    <DataGridComboBoxColumn.CellStyle>
                      <Style TargetType="DataGridCell" BasedOn="{StaticResource UcSingleRowAddEditFocus}" />
                    </DataGridComboBoxColumn.CellStyle>
                  </DataGridComboBoxColumn>
                  <DataGridTextColumn Header="{x:Static Properties:Resources.SET_VALUE}" IsReadOnly="True" Binding="{Binding Item.VALUE}" />
                  <DataGridTextColumn Header="{x:Static res:Resources.CRT_STAFF}" IsReadOnly="True" Binding="{Binding Item.CRT_NAME}" />
                  <DataGridTextColumn Header="{x:Static Properties:Resources.CRT_DATE}" IsReadOnly="True" Binding="{Binding Item.CRT_DATE, StringFormat=\{0:yyyy/MM/dd HH:mm\}}" />
                  <DataGridTextColumn Header="{x:Static res:Resources.UPD_STAFF}" IsReadOnly="True" Binding="{Binding Item.UPD_NAME}" />
                  <DataGridTextColumn Header="{x:Static Properties:Resources.UPD_DATE}" IsReadOnly="True" Binding="{Binding Item.UPD_DATE, StringFormat=\{0:yyyy/MM/dd HH:mm\}}" />
                </DataGrid.Columns>
                <DataGrid.Resources>
                  <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="DodgerBlue" />
                  <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="White" />
                </DataGrid.Resources>
              </DataGrid>
            </DockPanel>
          </TabItem>
        </TabControl>
      </uiLib:BasicMaster.MainContent>
    </uiLib:BasicMaster>
  </telerik:RadBusyIndicator>
</uiLib:Wms3plUserControl>