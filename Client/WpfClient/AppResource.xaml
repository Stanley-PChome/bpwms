<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
										xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls1="clr-namespace:Wms3pl.WpfClients.SharedViews.Controls;assembly=Wms3pl.WpfClients.SharedViews" 
										xmlns:uiLibCtrl="clr-namespace:Wms3pl.WpfClient.UILib.Controls;assembly=Wms3pl.WpfClient.UILib"
										xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
										>
  <Style TargetType="TextBlock" x:Key="FunctionTitle">
    <Setter Property="FontSize" Value="24"/>
  </Style>
  <Style x:Key="ToolBarButtonIcon" TargetType="Image">
    <Setter Property="FrameworkElement.FlowDirection" Value="LeftToRight" />
    <Setter Property="Height" Value="40" />
    <Setter Property="Stretch" Value="UniformToFill" />
  </Style>
  <Style x:Key="HeaderCloseLabelStyle" TargetType="Label">
    <Setter Property="Content" Value="X" />
    <Setter Property="FontSize" Value="15" />
    <Setter Property="Margin" Value="5, -4, 0, -4" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="Red"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <DataTemplate x:Key="ErrorHeaderTemplate">
    <!--<StackPanel Orientation="Horizontal">
      <Button Background="Red"  Width="15" Height="15" Controles:CloseButton.IsCloseButton="true"
								Controles:CloseButton.HideInAutoHideArea="true" Margin="0, 0, 5, 0"  />
      <ContentControl Foreground="Red">
        <ContentPresenter Content="{Binding}" />
      </ContentControl>
    </StackPanel>-->
    <Grid Margin="0, -3">
      <Grid.ColumnDefinitions>
        <ColumnDefinition />
        <ColumnDefinition />
      </Grid.ColumnDefinitions>
      <TextBlock Foreground="Red" Text="{Binding}" TextTrimming="CharacterEllipsis" ToolTip="{Binding}"/>
      <Button Background="Red" Controls1:CloseButton.IsCloseButton="true"
								Controls1:CloseButton.HideInAutoHideArea="True" Margin="0" ToolTip="關閉"
              Grid.Column="1">
        <Button.Template>
          <ControlTemplate>
            <Label Style="{StaticResource HeaderCloseLabelStyle}" />
          </ControlTemplate>
        </Button.Template>
      </Button>
    </Grid>
  </DataTemplate>
  <DataTemplate x:Key="NormalHeaderTemplate">
    <Grid Margin="0, -3">
      <Grid.ColumnDefinitions>
        <ColumnDefinition />
        <ColumnDefinition />
      </Grid.ColumnDefinitions>
      <TextBlock Text="{Binding}" TextTrimming="CharacterEllipsis" ToolTip="{Binding}"/>
      <Button Controls1:CloseButton.IsCloseButton="true" ToolTip="關閉"
								Controls1:CloseButton.HideInAutoHideArea="True" Margin="0"
              Grid.Column="1">
        <Button.Template>
          <ControlTemplate>
            <Label Style="{StaticResource HeaderCloseLabelStyle}" />
          </ControlTemplate>
        </Button.Template>
      </Button>
    </Grid>
  </DataTemplate>
  <DataTemplate x:Key="BusyHeaderTemplate">
    <DataTemplate.Resources>
      <Storyboard x:Key="Storyboard1" RepeatBehavior="Forever">
        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="button">
          <EasingColorKeyFrame KeyTime="0:0:0.3" Value="#FFFF2300"/>
          <EasingColorKeyFrame KeyTime="0:0:1" Value="Yellow"/>
        </ColorAnimationUsingKeyFrames>
      </Storyboard>
    </DataTemplate.Resources>
    <!--<StackPanel Orientation="Horizontal">
      <Button x:Name="button" Background="Yellow"  Width="15" Height="15" Controles:CloseButton.IsCloseButton="true"
								Controles:CloseButton.HideInAutoHideArea="true" Margin="0, 0, 5, 0" IsEnabled="False">
        <Button.Triggers>
          <EventTrigger RoutedEvent="Button.Loaded">
            <BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
          </EventTrigger>
        </Button.Triggers>
      </Button>
      <ContentPresenter Content="{Binding}" />
    </StackPanel>-->
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition />
        <ColumnDefinition />
      </Grid.ColumnDefinitions>
      <TextBlock Text="{Binding}" TextTrimming="CharacterEllipsis" ToolTip="{Binding}"/>
      <Button x:Name="button" Background="Yellow" Width="15" Height="15" Controls1:CloseButton.IsCloseButton="true"
								Controls1:CloseButton.HideInAutoHideArea="True" Margin="5, 0, 0, 0"
              Grid.Column="1" IsEnabled="False">
        <Button.Triggers>
          <EventTrigger RoutedEvent="Button.Loaded">
            <BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
          </EventTrigger>
        </Button.Triggers>
      </Button>
      <!--<ContentPresenter Content="{Binding}" />-->
    </Grid>
    <DataTemplate.Triggers>
      <EventTrigger RoutedEvent="FrameworkElement.Loaded" SourceName="button"/>
    </DataTemplate.Triggers>
  </DataTemplate>
	<ControlTemplate x:Key="InputErrorTemplate">
		<DockPanel VerticalAlignment="Center">
			<Popup Placement="Left" AllowsTransparency="True">
				<TextBlock DockPanel.Dock="Right" Foreground="Red" Background="LightPink" FontSize="12pt"
						Text="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
				</TextBlock>
				<Popup.Style>
					<Style TargetType="{x:Type Popup}">
						<Setter Property="IsOpen" Value="False"/>
						<Style.Triggers>
							<DataTrigger Binding="{Binding IsMouseOver, ElementName=err}" Value="True">
								<Setter Property="IsOpen" Value="True"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</Popup.Style>
			</Popup>
			<Grid DockPanel.Dock="Right" Margin="2,0" x:Name="err">
				<Ellipse StrokeThickness="0" Fill="Red" 
        Width="{TemplateBinding FontSize}" 
        Height="{TemplateBinding FontSize}" />
				<TextBlock Text="!" FontSize="{TemplateBinding FontSize}" 
        FontWeight="Bold" Foreground="White" 
        HorizontalAlignment="Center" VerticalAlignment="Center" />
			</Grid>
			<Border BorderBrush="Red" BorderThickness="2">
				<AdornedElementPlaceholder Name="MyAdorner" />
			</Border>
		</DockPanel>
	</ControlTemplate>

	<ControlTemplate x:Key="DataGridRowErrorTemplate">
		<DockPanel VerticalAlignment="Center">
			<Popup Placement="Left" AllowsTransparency="True">
				<TextBlock DockPanel.Dock="Right" Foreground="Red" Background="LightPink" FontSize="12pt"
						Text="{Binding RelativeSource={RelativeSource
      FindAncestor, AncestorType={x:Type DataGridRow}},
      Path=(Validation.Errors)[0].ErrorContent}">
				</TextBlock>
				<Popup.Style>
					<Style TargetType="{x:Type Popup}">
						<Setter Property="IsOpen" Value="False"/>
						<Style.Triggers>
							<DataTrigger Binding="{Binding IsMouseOver, ElementName=err}" Value="True">
								<Setter Property="IsOpen" Value="True"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</Popup.Style>
			</Popup>
			<Grid Margin="0,-2,0,-2" x:Name="err">
			<Ellipse StrokeThickness="0" Fill="Red" 
        Width="{TemplateBinding FontSize}" 
        Height="{TemplateBinding FontSize}" />
				<TextBlock Text="!" FontSize="{TemplateBinding FontSize}" 
        FontWeight="Bold" Foreground="White" 
        HorizontalAlignment="Center"  />
		</Grid>
		</DockPanel>
	</ControlTemplate>

	<Style TargetType="DataGrid">
		<Setter Property="ContextMenu">
			<Setter.Value>
				<ContextMenu Width="Auto">
					<MenuItem Header="匯出">
						<MenuItem.Icon>
							<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/but_1.png"></Image>
						</MenuItem.Icon>
						<i:Interaction.Triggers>
							<i:EventTrigger EventName="Click">
								<i:InvokeCommandAction Command="{Binding DataGridExportExcelCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=MenuItem}}" />
							</i:EventTrigger>
						</i:Interaction.Triggers>
					</MenuItem>
					<MenuItem Header="複製內容">
						<MenuItem.Icon>
							<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Copy.png"></Image>
						</MenuItem.Icon>
						<i:Interaction.Triggers>
							<i:EventTrigger EventName="Click">
								<i:InvokeCommandAction Command="{Binding DataGridCopyCellCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=MenuItem}}" />
							</i:EventTrigger>
						</i:Interaction.Triggers>
					</MenuItem>
				</ContextMenu>
			</Setter.Value>
		</Setter>
    <Setter Property="AlternatingRowBackground" Value="LightGreen" />
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <TextBlock DockPanel.Dock="Right" Foreground="White" Background="Red"
                         Text="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                       TextWrapping="Wrap"
                       Width="30">
            </TextBlock>
            <Border BorderBrush="Red" BorderThickness="2">
              <AdornedElementPlaceholder Name="MyAdorner" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
		<Setter Property="RowValidationErrorTemplate"  Value="{StaticResource DataGridRowErrorTemplate}" />
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip"
				Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
      </Trigger>
    </Style.Triggers>
	</Style>

	<Style TargetType="uiLibCtrl:ValidationDataGrid" BasedOn="{StaticResource {x:Type DataGrid}}">
	</Style>

	<Style TargetType="Grid">
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <AdornedElementPlaceholder/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="TextBox">
    <Setter Property="Margin" Value="4" />
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource InputErrorTemplate}" />
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip"
				Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsFocused" Value="True" />
				</MultiTrigger.Conditions>
				<MultiTrigger.Setters>
					<Setter Property="Background" Value="LightBlue"/>
				</MultiTrigger.Setters>
			</MultiTrigger>
		</Style.Triggers>
	</Style>
  <Style TargetType="{x:Type DataGridCell}">
    <Style.Triggers>
      <Trigger Property="IsReadOnly" Value="False">
        <Setter Property="Background" Value="Yellow" />
        <Setter Property="Foreground" Value="Black" />
      </Trigger>
      <!--<Trigger Property="IsSelected" Value="True">
        <Setter Property="Background" Value="LightGreen"/>
      </Trigger>-->
    </Style.Triggers>
  </Style>

  <!-- 功能區塊-->
  <Style TargetType="Border" x:Key="FunctionBlock">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="Black" />
    <Setter Property="Margin" Value="3" />
    <Setter Property="CornerRadius" Value="3" />
  </Style>
  <Style x:Key="LinkButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <TextBlock TextDecorations="Underline"><ContentPresenter /></TextBlock>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Foreground" Value="Blue" />
    <Setter Property="Cursor" Value="Hand" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Foreground" Value="Red" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="Button">
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Button.Effect">
          <Setter.Value>
            <DropShadowEffect/>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>



  <Style TargetType="Calendar" x:Key="CalenderStyleNew">
    <Setter Property="CalendarItemStyle">
      <Setter.Value>
        <Style TargetType="{x:Type CalendarItem}">
          <Setter Property="FontSize" Value="18"/>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="CalendarDayButtonStyle">
      <Setter.Value>
        <Style TargetType="CalendarDayButton">
          <Setter Property="FontSize" Value="18"/>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="CalendarButtonStyle">
      <Setter.Value>
        <Style TargetType="CalendarButton">
          <Setter Property="FontSize" Value="18"/>
        </Style>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="DatePicker">
    <Setter Property="CalendarStyle" Value="{DynamicResource CalenderStyleNew}" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>
  <Storyboard x:Key="sbOpen">
    <!--<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" >
      <EasingDoubleKeyFrame KeyTime="0" Value="0.1">
        <EasingDoubleKeyFrame.EasingFunction>
          <PowerEase EasingMode="EaseOut" Power="3"/>
        </EasingDoubleKeyFrame.EasingFunction>
      </EasingDoubleKeyFrame>
      <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1">
        <EasingDoubleKeyFrame.EasingFunction>
          <PowerEase EasingMode="EaseOut" Power="3"/>
        </EasingDoubleKeyFrame.EasingFunction>
      </EasingDoubleKeyFrame>
    </DoubleAnimationUsingKeyFrames>
    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" >
      <EasingDoubleKeyFrame KeyTime="0" Value="0.1">
        <EasingDoubleKeyFrame.EasingFunction>
          <PowerEase EasingMode="EaseOut" Power="3"/>
        </EasingDoubleKeyFrame.EasingFunction>
      </EasingDoubleKeyFrame>
      <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1">
        <EasingDoubleKeyFrame.EasingFunction>
          <PowerEase EasingMode="EaseOut" Power="3"/>
        </EasingDoubleKeyFrame.EasingFunction>
      </EasingDoubleKeyFrame>
    </DoubleAnimationUsingKeyFrames>-->
    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" >
      <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
      <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1">
        <EasingDoubleKeyFrame.EasingFunction>
          <PowerEase EasingMode="EaseOut" Power="3"/>
        </EasingDoubleKeyFrame.EasingFunction>
      </EasingDoubleKeyFrame>
    </DoubleAnimationUsingKeyFrames>
  </Storyboard>
</ResourceDictionary>