<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:uiLib="clr-namespace:Wms3pl.WpfClient.UILib" xmlns:controls="clr-namespace:Wms3pl.WpfClient.UILib.Controls" xmlns:controls1="clr-namespace:WpfKb.Controls;assembly=WpfKb" x:Class="Wms3pl.WpfClient.UILib.Generic" x:ClassModifier="public" xmlns:debug="DebugVersion" xmlns:release="ReleaseVersion" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:my="clr-namespace:Wms3pl.WpfClient.UILib.Utility" xmlns:Properties="clr-namespace:Wms3pl.WpfClient.UILib.Properties" xmlns:converters="clr-namespace:Wms3pl.WpfClient.Common.Converters;assembly=Wms3pl.WpfClient.Common">
	<converters:StringEmptyToNullConverter x:Key="StringEmptyToNullConverter" />
	<Style TargetType="{x:Type controls:ImageButton}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:ImageButton}">
					<StackPanel Height="Auto" Orientation="Horizontal" x:Name="gd">
						<Image Source="{TemplateBinding ImageSource}" Stretch="UniformToFill" />
						<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Left" Foreground="{DynamicResource TaskButtonTextBrush}" FontWeight="Bold" Margin="5,0,0,0" VerticalAlignment="Center" FontSize="12" />
					</StackPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ToolBarButtonIcon" TargetType="Image">
		<Setter Property="FrameworkElement.FlowDirection" Value="LeftToRight" />
		<Setter Property="Height" Value="36" />
		<Setter Property="Stretch" Value="UniformToFill" />
	</Style>
	<Style x:Key="AddButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.Add}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.Add}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Add.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="FirstButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.ToolTip}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.ToolTip}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/First.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="PriorButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.First}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.First}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Previous.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="NextButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.Next}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.Next}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Next.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="LastButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.Last}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.Last}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Last.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="SaveButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.Confirm}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.Confirm}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Save.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
    <Style x:Key="ApproveButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="ToolTip" Value="{x:Static Properties:Resources.Approve}" />
        <!--<Setter Property="Content" Value="{x:Static Properties:Resources.Approve}" />-->
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel x:Name="gd">
                        <Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Save.png" Style="{StaticResource ToolBarButtonIcon}" />
                        <!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
                    </StackPanel>
                    <DataTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3" TargetName="gd" />
                        </Trigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="EditButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.Edit}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.Edit}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Edit.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CancelButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.Cancel}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.Cancel}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Back.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DeleteButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.Deleted}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.Deleted}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Delete.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="SearchButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.Query}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.Query}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Search.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="PrintButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.Print}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.Print}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Print.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="PreviewButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.View}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.View}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Preview.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ExportButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.Content}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.Export}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Export.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CopyButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.Copy}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.Copy}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Copy.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ExcelButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.ExportExcel}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.Export}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/but_1.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ImportExcelButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.ImportExcel}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.Import}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/but_1.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ImportButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.Import}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.Import}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/but_3.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ExitButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.Exist}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.Exist}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/Exit.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CloseOutButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="ToolTip" Value="{x:Static Properties:Resources.CloseCase}" />
		<!--<Setter Property="Content" Value="{x:Static Properties:Resources.CloseCase}" />-->
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<StackPanel x:Name="gd">
						<Image Source="/Wms3pl.WpfClient.UILib;component/Assets/but_2.png" Style="{StaticResource ToolBarButtonIcon}" />
						<!--<TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" />-->
					</StackPanel>
					<DataTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3" TargetName="gd" />
						</Trigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="DataGrid" BasedOn="{StaticResource {x:Type DataGrid}}">
		<Style.Triggers>
			<DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=Items.Count}" Value="0">
				<Setter Property="Foreground" Value="Blue" />
			</DataTrigger>
		</Style.Triggers>
		<!-- DataGrid不在作用中時, 保持選取列的背景顏色 - For dotNet 4.5 -->
		<Style.Resources>
			<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="DodgerBlue" />
			<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="White" />
		</Style.Resources>
	</Style>
	<Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
		<EventSetter Event="MouseRightButtonUp" Handler="DataGridCell_MouseRightButtonUp" />
	</Style>
	<Style TargetType="DataGridCell" x:Key="SingleClickEdit" BasedOn="{StaticResource {x:Type DataGridCell}}">
		<EventSetter Event="PreviewMouseLeftButtonDown" Handler="DataGridCell_PreviewMouseLeftButtonDown"></EventSetter>
	</Style>
	<Style x:Key="UcSingleRowEdit" TargetType="DataGridCell" BasedOn="{StaticResource SingleClickEdit}">
		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="False" />
					<Condition Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}" Value="Add" />
				</MultiDataTrigger.Conditions>
				<Setter Property="IsEnabled" Value="False" />
				<Setter Property="DataGridRowHeader.IsEnabled" Value="False" />
				<Setter Property="Background" Value="{Binding DataGridRow.Background}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="False" />
					<Condition Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}" Value="Edit" />
				</MultiDataTrigger.Conditions>
				<Setter Property="IsEnabled" Value="False" />
				<Setter Property="DataGridRowHeader.IsEnabled" Value="False" />
				<Setter Property="Background" Value="{Binding DataGridRow.Background}" />
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="UcSingleRowHeaderEdit" TargetType="DataGridRowHeader">
		<Style.Triggers>
			<DataTrigger Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}" Value="Add">
				<Setter Property="IsEnabled" Value="False" />
			</DataTrigger>
			<DataTrigger Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}" Value="Edit">
				<Setter Property="IsEnabled" Value="False" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="WinSingleRowEdit" TargetType="DataGridCell" BasedOn="{StaticResource SingleClickEdit}">
		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="False" />
					<Condition Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="Add" />
				</MultiDataTrigger.Conditions>
				<Setter Property="IsEnabled" Value="False" />
				<Setter Property="Background" Value="{Binding DataGridRow.Background}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="False" />
					<Condition Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="Edit" />
				</MultiDataTrigger.Conditions>
				<Setter Property="IsEnabled" Value="False" />
				<Setter Property="Background" Value="{Binding DataGridRow.Background}" />
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="WinSingleRowHeaderEdit" TargetType="DataGridRowHeader">
		<Style.Triggers>
			<DataTrigger Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="Add">
				<Setter Property="IsEnabled" Value="False" />
			</DataTrigger>
			<DataTrigger Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="Edit">
				<Setter Property="IsEnabled" Value="False" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="DataGridCell" x:Key="UcSingleRowAddEditFocus" BasedOn="{StaticResource UcSingleRowEdit}">
		<EventSetter Event="GotFocus" Handler="DataGridCell_GotFocus" />
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="True" />
					<Condition Property="IsReadOnly" Value="False" />
				</MultiTrigger.Conditions>
				<Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="DataGridCell" x:Key="UcSingleRowAddFocus" BasedOn="{StaticResource UcSingleRowEdit}">
		<EventSetter Event="GotFocus" Handler="DataGridCell_GotFocus" />
		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsReadOnly}" Value="False" />
					<Condition Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}" Value="Add" />
				</MultiDataTrigger.Conditions>
				<Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}" />
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="DataGridCell" x:Key="UcSingleRowEditFocus" BasedOn="{StaticResource UcSingleRowEdit}">
		<EventSetter Event="GotFocus" Handler="DataGridCell_GotFocus" />
		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsReadOnly}" Value="False" />
					<Condition Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}" Value="Edit" />
				</MultiDataTrigger.Conditions>
				<Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}" />
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="DataGridCell" x:Key="WinSingleRowAddEditFocus" BasedOn="{StaticResource WinSingleRowEdit}">
		<EventSetter Event="GotFocus" Handler="DataGridCell_GotFocus" />
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="True" />
					<Condition Property="IsReadOnly" Value="False" />
				</MultiTrigger.Conditions>
				<Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="DataGridCell" x:Key="WinSingleRowAddFocus" BasedOn="{StaticResource WinSingleRowEdit}">
		<EventSetter Event="GotFocus" Handler="DataGridCell_GotFocus" />
		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsReadOnly}" Value="False" />
					<Condition Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="Add" />
				</MultiDataTrigger.Conditions>
				<Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}" />
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="DataGridCell" x:Key="WinSingleRowEditFocus" BasedOn="{StaticResource WinSingleRowEdit}">
		<EventSetter Event="GotFocus" Handler="DataGridCell_GotFocus" />
		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsReadOnly}" Value="False" />
					<Condition Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="Edit" />
				</MultiDataTrigger.Conditions>
				<Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}" />
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="DataGridCell" x:Key="SingleClickAddEditFocus" BasedOn="{StaticResource SingleClickEdit}">
		<EventSetter Event="GotFocus" Handler="DataGridCell_GotFocus" />
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="True" />
					<Condition Property="IsReadOnly" Value="False" />
				</MultiTrigger.Conditions>
				<Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="DataGridCell" x:Key="SingleClickUcAddFocus" BasedOn="{StaticResource SingleClickEdit}">
		<EventSetter Event="GotFocus" Handler="DataGridCell_GotFocus" />
		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsReadOnly}" Value="False" />
					<Condition Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}" Value="Add" />
				</MultiDataTrigger.Conditions>
				<Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}" />
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="DataGridCell" x:Key="SingleClickUcEditFocus" BasedOn="{StaticResource SingleClickEdit}">
		<EventSetter Event="GotFocus" Handler="DataGridCell_GotFocus" />
		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsReadOnly}" Value="False" />
					<Condition Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}" Value="Edit" />
				</MultiDataTrigger.Conditions>
				<Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}" />
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="DataGridCell" x:Key="SingleClickWinAddFocus" BasedOn="{StaticResource SingleClickEdit}">
		<EventSetter Event="GotFocus" Handler="DataGridCell_GotFocus" />
		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsReadOnly}" Value="False" />
					<Condition Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="Add" />
				</MultiDataTrigger.Conditions>
				<Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}" />
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="DataGridCell" x:Key="SingleClickWinEditFocus" BasedOn="{StaticResource SingleClickEdit}">
		<EventSetter Event="GotFocus" Handler="DataGridCell_GotFocus" />
		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsReadOnly}" Value="False" />
					<Condition Binding="{Binding DataContext.UserOperateMode, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="Edit" />
				</MultiDataTrigger.Conditions>
				<Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}" />
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="FrameworkElement" x:Key="DataGridEditingElement">
		<Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}" />
	</Style>
	<Style TargetType="UserControl" x:Key="UserControlStyle">
		<Setter Property="Background">
			<Setter.Value>
				<ImageBrush ImageSource="/Wms3pl.WpfClient.UILib;component/Assets/PageTop_bg2.png" AlignmentY="Top" AlignmentX="Left" Stretch="Uniform" />
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="uiLib:Wms3plWindow" x:Key="WindowStyle">
		<Setter Property="Background">
			<Setter.Value>
				<ImageBrush ImageSource="/Wms3pl.WpfClient.UILib;component/Assets/PageTop_bg2.png" AlignmentY="Top" AlignmentX="Left" Stretch="Fill" />
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="DockPanel" x:Key="WindowDockPanelStyle">
		<Setter Property="Background" Value="#FFEFEBDE" />
	</Style>
	<Style TargetType="uiLib:Wms3plPage" x:Key="PageStyle">
		<Setter Property="Background">
			<Setter.Value>
				<ImageBrush ImageSource="/Wms3pl.WpfClient.UILib;component/Assets/Wms3pl-bg.png" />
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="uiLib:Wms3plUserControl" BasedOn="{StaticResource UserControlStyle}"></Style>
	<Style TargetType="uiLib:Wms3plWindow" x:Key="PdaWindow">
		<Setter Property="Height" Value="320" />
		<Setter Property="Width" Value="240" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="Background" Value="Transparent" />
	</Style>
	<Style TargetType="uiLib:Wms3plWindow" x:Key="RFWindow" BasedOn="{StaticResource WindowStyle}">
		<Setter Property="Height" Value="600" />
		<Setter Property="Width" Value="800" />
		<Setter Property="FontSize" Value="24" />
		<Setter Property="Background" Value="#FFEFEBDE" />
		<!--<mc:AlternateContent>
      <mc:Choice Requires="debug">
        <Setter Property="WindowState" Value="Normal" />
      </mc:Choice>
      <mc:Choice Requires="release">
        <Setter Property="WindowState" Value="Normal" />
      </mc:Choice>
    </mc:AlternateContent>-->
		<Setter Property="Top" Value="0" />
		<Setter Property="Left" Value="0" />
	</Style>
	<Style TargetType="uiLib:Wms3plPage" x:Key="RFPage" BasedOn="{StaticResource PageStyle}">
		<Setter Property="Height" Value="600" />
		<Setter Property="Width" Value="800" />
		<Setter Property="FontSize" Value="24" />
	</Style>
	<Style TargetType="controls:ValidationDataGrid" BasedOn="{StaticResource {x:Type DataGrid}}" />
	<Style TargetType="Button" x:Key="RFButton">
		<Setter Property="Width" Value="200" />
		<Setter Property="Margin" Value="20, 0" />
	</Style>
	<Style TargetType="controls1:SmartVirtualKeyboard">
		<Setter Property="Width" Value="740" />
		<Setter Property="Height" Value="280" />
		<Setter Property="AreAnimationsEnabled" Value="False" />
		<Setter Property="IsAllowedToFade" Value="False" />
	</Style>
	<Style TargetType="Label" x:Key="LbStyle">
		<Setter Property="Margin" Value="3" />
		<Setter Property="MinWidth" Value="60" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<!--<Setter Property="BorderBrush" Value="DarkGray"/>
		<Setter Property="BorderThickness" Value="1"/>-->
	</Style>
	<Style TargetType="Label" x:Key="LbStyleForPackage">
		<Setter Property="Margin" Value="0" />
		<Setter Property="MinWidth" Value="45" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<!--<Setter Property="BorderBrush" Value="DarkGray"/>
		<Setter Property="BorderThickness" Value="1"/>-->
	</Style>
	<Style TargetType="Label" x:Key="LbTitleStyle">
		<Setter Property="Margin" Value="3" />
		<Setter Property="MinWidth" Value="60" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Right" />
	</Style>
	<Style TargetType="Label" x:Key="LbBorderStyle">
		<Setter Property="Margin" Value="3" />
		<Setter Property="MinWidth" Value="150" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="BorderBrush" Value="#FFCCCCCC" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Label">
					<Border BorderBrush="#FFCCCCCC" BorderThickness="1">
						<ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="DatePickerTextBox" x:Key="DateMonthStyle">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<TextBox Text="{Binding Path=SelectedDate, StringFormat = \{0:yyyy/MM\},        RelativeSource={RelativeSource AncestorType={x:Type DatePicker}},       Converter={StaticResource StringEmptyToNullConverter}}" Height="Auto" TextChanged="TextBox_TextChanged" LostFocus="TextBox_LostFocus" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="DatePicker" x:Key="DateStyle">
		<Setter Property="Margin" Value="3" />
		<Setter Property="Width" Value="150" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="HorizontalAlignment" Value="Left" />
    </Style>
    <Style TargetType="Calendar" x:Key="RFCalendarStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <Viewbox Height="500"
                         Width="500">
                        <CalendarItem x:Name="PART_CalendarItem"
                                  Background="{TemplateBinding Background}"
                                  BorderBrush="{TemplateBinding BorderBrush}"
                                  BorderThickness="{TemplateBinding BorderThickness}"/>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	<Style TargetType="ComboBox" x:Key="ComboStyle">
		<Setter Property="Margin" Value="3" />
		<Setter Property="Width" Value="150" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="HorizontalAlignment" Value="Left" />
	</Style>
	<Style TargetType="TextBox" x:Key="TxtStyle" BasedOn="{StaticResource {x:Type TextBox}}">
		<Setter Property="Margin" Value="3" />
		<Setter Property="Width" Value="150" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="HorizontalAlignment" Value="Left" />
	</Style>
  <Style TargetType="TextBox" x:Key="TxtMultiLineStyle" BasedOn="{StaticResource TxtStyle}">
    <Setter Property="VerticalScrollBarVisibility" Value="Visible"/>
    <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="AcceptsReturn" Value="True"/>
    <Setter Property="MaxLines" Value="5"/>
  </Style>
  <Style TargetType="Button" x:Key="BtnStyle">
		<Setter Property="Margin" Value="3" />
		<Setter Property="MinWidth" Value="120" />
		<Setter Property="MinHeight" Value="50" />
	</Style>
	<!-- 於Window下, 如果套用BtnStyle, 可能會造成Button高度太高而顯示不正常, 因此減低Button的MinHeight -->
	<Style TargetType="Button" x:Key="WindowBtnStyle">
		<Setter Property="Margin" Value="3" />
		<Setter Property="MinWidth" Value="120" />
		<Setter Property="MinHeight" Value="40" />
	</Style>
	<Style TargetType="DataGrid" x:Key="DgStyle" BasedOn="{StaticResource {x:Type DataGrid}}">
		<Setter Property="Margin" Value="5" />
		<Setter Property="AutoGenerateColumns" Value="False" />
		<Setter Property="CanUserAddRows" Value="False" />
		<Setter Property="CanUserDeleteRows" Value="False" />
		<Setter Property="IsReadOnly" Value="True" />
	</Style>
	<InputBindingCollection x:Key="DataGridInputCollection" x:Shared="False">
		<KeyBinding Key="F1" Command="uiLib:WmsCommands.CopyFieldValue" />
	</InputBindingCollection>
	<CommandBindingCollection x:Key="DataGridCommandCollection" x:Shared="False">
		<CommandBinding Command="uiLib:WmsCommands.CopyFieldValue" Executed="GridCopyFieldValueExecuted" />
	</CommandBindingCollection>
	<Style TargetType="DataGrid" x:Key="DgCopyStyle" BasedOn="{StaticResource {x:Type DataGrid}}">
		<Setter Property="Margin" Value="5" />
		<Setter Property="AutoGenerateColumns" Value="False" />
		<Setter Property="CanUserAddRows" Value="False" />
		<Setter Property="CanUserDeleteRows" Value="False" />
		<Setter Property="IsReadOnly" Value="True" />
		<Setter Property="ContextMenu">
			<Setter.Value>
				<ContextMenu DataContext="{Binding PlacementTarget.Tag, RelativeSource={x:Static RelativeSource.Self}}">
					<MenuItem Header="Copy">
						<MenuItem.Style>
							<Style TargetType="MenuItem">
								<Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=Parent}" />
								<EventSetter Event="Click" Handler="CopyColumnData"></EventSetter>
							</Style>
						</MenuItem.Style>
					</MenuItem>
				</ContextMenu>
			</Setter.Value>
		</Setter>
		<Setter Property="uiLib:GenericAttach.InputBindings" Value="{StaticResource DataGridInputCollection}" />
		<Setter Property="uiLib:GenericAttach.CommandBindings" Value="{StaticResource DataGridCommandCollection}" />
		<!--<Setter Property="ContextMenu">
			<Setter.Value>
				<ContextMenu DataContext="{Binding PlacementTarget.Tag, RelativeSource={x:Static RelativeSource.Self}}">
					<MenuItem Header="Copy" Click="CopyColumnData" 
						 CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent}"  />
				</ContextMenu>
			</Setter.Value>
		</Setter>-->
		<!--<DataGrid.ContextMenu>
			<ContextMenu DataContext="{Binding PlacementTarget.DataContext, RelativeSource= {RelativeSource Self}}">
				<MenuItem Header="Add Divider" Click="MenuItem_Click" 
						 CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent}"  />
			</ContextMenu>
		</DataGrid.ContextMenu>-->
		<!--<Setter Property="ContextMenu">
			<Setter.Value>				
				<ContextMenu>
					<MenuItem Header="Copy">
						<MenuItem.Style>
							<Style TargetType="MenuItem">
								<EventSetter Event="Click" Handler="CopyColumnData"></EventSetter>
							</Style>
						</MenuItem.Style>
					</MenuItem>
				</ContextMenu>
			</Setter.Value>			
		</Setter>-->
	</Style>
	<Style TargetType="CheckBox" x:Key="CheckStyle" BasedOn="{StaticResource {x:Type CheckBox}}">
		<Setter Property="Margin" Value="3" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>
	<Style TargetType="RadioButton" x:Key="RbStyle" BasedOn="{StaticResource {x:Type RadioButton}}">
		<Setter Property="Margin" Value="3" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>
	<Style x:Key="WrappedColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock TextWrapping="Wrap" Text="{Binding}"></TextBlock>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<my:BoolToFormStatusConverter x:Key="BoolToFormStatusConverter" />
</ResourceDictionary>